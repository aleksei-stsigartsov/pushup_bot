import logging
import json
import os
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext
from telegram.ext import filters
import re

DATA_FILE = "pushup_data.json"

PUSHUP_QUOTES = [
    "–†–µ—Å–ø–µ–∫—Ç —á—É–≤–∞–∫",
    "+–†—ç–ø",
    "–†–µ—Å–ø–µ–∫—Ç –ø–ª—é—Å", 
    "–°—Ä–∞–∑—É –≤–∏–¥–Ω–æ, –∫—Ä–∞—Å–∞–≤–∞",
    "–ù–µ—Ç, –Ω—É –±–ª—è—Ç—å, —ç—Ç–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è –±—ã–ª–∏ –∑–∞–µ–±–∏—Å—å",
    "–ë–æ–≥ –æ—Ç–∂–∏–º–∞–Ω–∏–π –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π",
    "–ê —Ç—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è –ø–∞—Ä–µ–Ω—å, –Ω—É –∫–∞ —Å–¥–µ–ª–∞–π –µ—â–µ 2 –æ—Ç–∂–∏–º–∞–Ω–∏—è. –î–æ–ª–≥ –≤—ã—Ä–æ—Å –Ω–∞ 2 –∞–Ω–∂—É–º–∞–Ω–∏—è.",
    "–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è —É–≤–∞–∂–∞–ª–∏? –û—Ç–∂–∏–º–∞–π—Å—è! –ê –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å ‚Äì –æ—Ç–∂–∏–º–∞–π—Å—è –¥–≤–∞–∂–¥—ã –ø–∏–¥–æ—Ä!",
    "–ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –Ω–µ –¥–µ–ª–∞–µ—Ç —Ä–∞–∑–º–∏–Ω–∫—É. –≠—Ç–æ –º–∏—Ä –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –µ–≥–æ –Ω–∞–≥—Ä—É–∑–∫–µ.",
    "–¢—ã –Ω–µ —Å–ª–∞–±—ã–π, –ø—Ä–æ—Å—Ç–æ —Ç–µ–±–µ –µ—â—ë —Ä–∞–Ω–æ –µ–±—à–∏—Ç—å –≤ –ª–∏–≥–µ –ë–æ–≥–æ–≤ –û—Ç–∂–∏–º–∞–Ω–∏–π.",
    "–ö–æ–≥–¥–∞ –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –ø–∞–¥–∞–µ—Ç, –ó–µ–º–ª—è –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ —Ç–æ, —á—Ç–æ –æ–∫–∞–∑–∞–ª–∞—Å—å —É –Ω–µ–≥–æ –ø–æ–¥ —Ä—É–∫–æ–π.",
    "–ù–µ –º–æ–∂–µ—à—å –æ—Ç–∂–∞—Ç—å—Å—è –±–æ–ª—å—à–µ? –ù—É –∏ —Ö—Ä–µ–Ω —Å —Ç–æ–±–æ–π, —ç–≤–æ–ª—é—Ü–∏—è —Å–∞–º–∞ —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è. –î–æ–ª–≥ –≤—ã—Ä–æ—Å –Ω–∞ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π.",
    "–ü–æ–∫–∞ —Ç—ã –Ω–æ–µ—à—å, —á—Ç–æ —É—Å—Ç–∞–ª, –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –æ—Ç–∂–∞–ª—Å—è –µ—â—ë —Ä–∞–∑. –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –º–∞—Ç—å –∏–º –≥–æ—Ä–¥–∏—Ç—Å—è.",
    "–ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–¥—ã—Ö–∞–µ—Ç. –û–Ω –ø—Ä–æ—Å—Ç–æ –¥–∞—ë—Ç –≤—Å–µ–ª–µ–Ω–Ω–æ–π –¥–æ–≥–Ω–∞—Ç—å –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "–ö–∞–∂–¥–æ–µ –æ—Ç–∂–∏–º–∞–Ω–∏–µ ‚Äì —à–∞–≥ –±–ª–∏–∂–µ –∫ –≤–µ–ª–∏—á–∏—é. –ò–ª–∏ –∫ —Å—Ä–∞–Ω–æ–π –±–æ–ª–∏ –≤ –º—ã—à—Ü–∞—Ö, —á—Ç–æ —Ç–æ–∂–µ –Ω–µ–ø–ª–æ—Ö–æ.",
    "–ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –Ω–µ –≤—Å–ø–æ—Ç–µ–≤–∞–µ—Ç ‚Äì —ç—Ç–æ –í—Å–µ–ª–µ–Ω–Ω–∞—è –º–æ–∫—Ä–µ–µ—Ç –æ—Ç –µ–≥–æ –º–æ—â–Ω–æ—Å—Ç–∏.",
    "–¢—ã –Ω–µ —É—Å—Ç–∞–ª, —Ç—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–∂—Ä–∞–ª—Å—è. –û—Ç–∂–∏–º–∞–π—Å—è, –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –∑–∞–µ–±—Å—å!",
    "–ö—Ç–æ-—Ç–æ –±–µ–∂–∏—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º. –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –æ—Ç–∂–∏–º–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ —É–±–µ–≥—É—Ç –æ—Ç –Ω–µ–≥–æ.",
    "–ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –Ω–µ –∫–ª–∞–¥—ë—Ç –ª–∞–¥–æ–Ω–∏ –Ω–∞ –ø–æ–ª. –û–Ω –¥–µ—Ä–∂–∏—Ç –ó–µ–º–ª—é, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —É–ª–µ—Ç–µ–ª–∞ –Ω–∞—Ö–µ—Ä.",
    "–ö–æ–≥–¥–∞ —Ç—ã –æ—Ç–∂–∏–º–∞–µ—à—å—Å—è, –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π —Å–º–æ—Ç—Ä–∏—Ç –∏ –¥—É–º–∞–µ—Ç: –Ω—É —Ö–æ—Ç—å —Å—Ç–∞—Ä–∞–µ—Ç—Å—è, —É–∂–µ –Ω–µ–ø–ª–æ—Ö–æ.",
    "–ù–µ –º–æ–∂–µ—à—å –æ—Ç–∂–∞—Ç—å—Å—è 50 —Ä–∞–∑? –õ–∞–¥–Ω–æ, –Ω–∞—á–Ω–∏ —Å 51, —Å–ª–∞–±–∞–∫, —Ç–≤–æ–π –¥–æ–ª–≥ –≤—ã—Ä–æ—Å –Ω–∞ 1 –æ—Ç–∂–∏–º–∞–Ω–∏–µ.",
    "–ó–∞–µ–±–∞–ª—Å—è –¥–µ–ª–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –¥–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è. –¢–≤–æ–π –¥–æ–ª–≥ –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –µ—â–µ –Ω–∞ 25 –æ—Ç–∂–∏–º–∞–Ω–∏–π.",
    "–ö–æ–≥–¥–∞ –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π —Å–¥–µ–ª–∞–ª —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –æ—Ç–∂–∏–º–∞–Ω–∏–µ, –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∏.",
    "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å 50 –æ—Ç–∂–∏–º–∞–Ω–∏–π? –ú–æ–∂–µ—à—å. –ü—Ä–æ—Å—Ç–æ —Ö–≤–∞—Ç–∏—Ç –±—ã—Ç—å —Ç—Ä—è–ø–∫–æ–π!",
    "–ö–æ–≥–¥–∞ —Ç—ã –¥–µ–ª–∞–µ—à—å –æ—Ç–∂–∏–º–∞–Ω–∏—è, –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è —Å–º–µ—ë—Ç—Å—è. –ö–æ–≥–¥–∞ –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π –¥–µ–ª–∞–µ—Ç ‚Äì –æ–Ω–∞ –ø–∏—à–µ—Ç –∑–∞–≤–µ—â–∞–Ω–∏–µ.",
    "–ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π, —Ç–æ —Å–¥–µ–ª–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ. –í —á–µ—Å—Ç—å –ø–∞–º—è—Ç–∏ –æ —Å–≤–æ–µ–π –≥–æ—Ä–¥–æ—Å—Ç–∏.",
    "–ö—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å 50 –æ—Ç–∂–∏–º–∞–Ω–∏–π, —Ç–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç +50 –∫–≥ –∫ –∫–æ–º–ø–ª–µ–∫—Å—É –Ω–µ–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
    "–ì–æ–≤–æ—Ä—è—Ç –±–æ–≥ –æ—Ç–∂–∏–º–∞–Ω–∏–π –ø–æ–∫–∞ –æ—Ç–∂–∏–º–∞–ª—Å—è, —Å—á—ë—Ç –µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –ø—Ä–∏–≤—ã—Å–∏–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, –¥–≤–∞–∂–¥—ã.",
    "–î–µ–≤—É—à–∫–∞ –±—Ä–æ—Å–∏–ª–∞? –ü–æ–¥—Ä–æ—á–∏ –∏ –æ—Ç–æ–∂–º–∏—Å—å! –†–∞–±–æ—Ç–∞ –±–µ—Å–∏—Ç? –û—Ç–æ–∂–º–∏—Å—å –∏ –ø–æ–¥—Ä–æ—á–∏! –ñ–∏–∑–Ω—å –≥–æ–≤–Ω–æ? –ü–æ–¥—Ä–æ—á–∏, –æ—Ç–æ–∂–º–∏—Å—å –∏ –ø–æ–¥—Ä–æ—á–∏ –µ—â—ë —Ä–∞–∑! –ë–æ–≥ –û—Ç–∂–∏–º–∞–Ω–∏–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç."
]

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except json.JSONDecodeError:
            logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
            return {}
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

data = load_data()

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

keyboard = [
    ["–ú–æ–π –¥–æ–ª–≥", "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è"], 
    ["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–ò–∑–≥–Ω–∞—Ç—å –ª—É–∑–µ—Ä–∞"], 
    ["–î–æ–ª–≥–∏ –ø–∞—Ü–∞–Ω–æ–≤"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_random_quote():
    return random.choice(PUSHUP_QUOTES)

def process_pushup_quote(quote):
    match = re.search(r"–¥–æ–ª–≥ –≤—ã—Ä–æ—Å –Ω–∞ (\d+) –æ—Ç–∂–∏–º–∞–Ω–∏–π", quote)
    if match:
        return int(match.group(1))
    return 0

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ê–Ω–∂—É–º–∞–Ω—è!", reply_markup=reply_markup)

async def register(update: Update, context: CallbackContext) -> None:
    username = update.message.from_user.username
    if not username:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –≤ —Ç–≥. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ.")
        return
    
    if username in data:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        data[username] = {"debt": 50, "last_update": datetime.now().isoformat()}
        save_data(data)
        await update.message.reply_text(f"{username}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à –¥–æ–ª–≥: 50 –æ—Ç–∂–∏–º–∞–Ω–∏–π.")

async def remove(update: Update, context: CallbackContext) -> None:
    if not data:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ö–∞–∫–æ–≥–æ —Ö—É—è?")
        return
    
    keyboard = [[InlineKeyboardButton(user, callback_data=f"remove_{user}")] for user in data.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª—É–∑–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def confirm_remove(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    username = query.data.replace("remove_", "")
    if username in data:
        del data[username]
        save_data(data)
        await query.answer()
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∏–∑–≥–Ω–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤ –ë–æ–≥–∞ –ê–Ω–∂—É–º–∞–Ω–∏–π –∏ –ø–æ—Ç–µ—Ä–ø–µ–ª –±–æ–ª—å—à–æ–π —Å–∞—Å–∞–π.")
    else:
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def pushups(update: Update, context: CallbackContext) -> None:
    username = update.message.from_user.username
    if username not in data:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
        return
    
    try:
        count = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pushups 20")
        return
    
    data[username]["debt"] = max(0, data[username]["debt"] - count)
    quote = get_random_quote()
    additional_debt = process_pushup_quote(quote)
    data[username]["debt"] += additional_debt
    save_data(data)
    
    await update.message.reply_text(f"{username}, –≤–∞—à –¥–æ–ª–≥ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {count}! –û—Å—Ç–∞–ª–æ—Å—å: {data[username]['debt']} –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n\n{quote}")

async def status(update: Update, context: CallbackContext) -> None:
    username = update.message.from_user.username
    if username not in data:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –±–ª—è—Ç—å.")
        return
    
    await update.message.reply_text(f"{username}, –≤–∞—à —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥: {data[username]['debt']} –æ—Ç–∂–∏–º–∞–Ω–∏–π.")

async def show_all_debts(update: Update, context: CallbackContext) -> None:
    debt_message = "–î–æ–ª–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for username, info in data.items():
        debt = info["debt"]
        if debt > 500:
            debt_message += f"{username}: {debt} –æ—Ç–∂–∏–º–∞–Ω–∏–π ü™¶ (—Ä–µ—Å—Ç –∏–Ω –ø–∏—Å –±—Ä–æ...)\n"
        elif debt > 300:
            debt_message += f"{username}: {debt} –æ—Ç–∂–∏–º–∞–Ω–∏–π üíÄ (–µ–º—É –ø–æ—á—Ç–∏ –ø–∏–∑–¥–∞)\n"
        elif debt > 100:
            debt_message += f"{username}: {debt} –æ—Ç–∂–∏–º–∞–Ω–∏–π ... (–∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ –ø–∞—Ä–µ–Ω—å. –±–æ–≥ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π)\n"
        else:
            debt_message += f"{username}: {debt} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
    
    await update.message.reply_text(debt_message)

async def handle_text(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    username = update.message.from_user.username

    if text == "–ú–æ–π –¥–æ–ª–≥":
        if username not in data:
            await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
            return
        await update.message.reply_text(f"{username}, –≤–∞—à —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥: {data[username]['debt']} –æ—Ç–∂–∏–º–∞–Ω–∏–π.")
    
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /pushups 20")
    
    elif text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        await register(update, context)
    
    elif text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await remove(update, context)
    
    elif text == "–î–æ–ª–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        await show_all_debts(update, context)

async def error_handler(update: Update, context: CallbackContext) -> None:
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

application = Application.builder().token("7892017077:AAGdD3LMXoTwzclDNasSpf5eutD6gm6WflM").build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("register", register))
application.add_handler(CommandHandler("remove", remove))
application.add_handler(CommandHandler("pushups", pushups))
application.add_handler(CommandHandler("status", status))
application.add_handler(CommandHandler("debts", show_all_debts))
application.add_handler(CallbackQueryHandler(confirm_remove))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_error_handler(error_handler)

application.run_polling()